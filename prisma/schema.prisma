datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  student Student?
  teacher Teacher?
  role String[] @default([])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
    id String @id @default(cuid())
    userID String @unique
    user User @relation(fields: [userID], references: [id])
    wishlist Course[] @relation(name: "wishlist")
    cart Course[] @relation(name: "cart")
    purchases Course[]
    reviews Review[]
}

model Teacher {
    id String @id @default(cuid())
    userID String @unique
    user User @relation(fields: [userID], references: [id])
    courses Course[]
    scale String
    organization String
}

model Course {
    id String @id @default(cuid())
    creator Teacher @relation(fields: [creatorId], references: [id])
    creatorId String @unique
    name String
    description String
    visuals String[]
    count Int @default(0)
    rating Float @default(0)
    price Float 
    wishlist Student[] @relation(name: "wishlist")
    cart Student[] @relation(name: "cart")
    purchases Student[]
    lessons Lesson[]
    reviews Review[]
    categories Categories[]
}

model Lesson {
    id String @id @default(cuid())
    courseID String
    course Course @relation(fields: [courseID], references: [id])
    sublessons Json[]
    title String
    description String
}

model Review {
    id String @id @default(cuid())
    courseID String
    course Course @relation(fields: [courseID], references: [id])
    rating Float
    studentID String
    student Student @relation(fields: [studentID], references: [id])
    explanation String
}

model Categories {
  id String @id @default(cuid())
  name String
  courses Course[]
}